<?php

/**
 * @defgroup print Printer, email and PDF versions
 *
 * Welcome to the print module developer's documentation. The interesting
 * functions for themers are those that start with 'theme_'.
 *
 * - Printer-friendly pages
 *   - @link print.module Module main file @endlink
 *   - @link print.admin.inc Settings form @endlink
 *   - @link print.pages.inc HTML generation @endlink
 *   - @link print.install (Un)Install routines @endlink
 *   - @link print.tpl.php Page generation template @endlink
 * - Send by email
 *   - @link print_mail.module Module main file @endlink
 *   - @link print_mail.admin.inc Settings form @endlink
 *   - @link print_mail.inc Mail form and send mail routine @endlink
 *   - @link print_mail.install (Un)Install routines @endlink
 * - PDF version
 *   - @link print_pdf.module Module main file @endlink
 *   - @link print_pdf.admin.inc Settings form @endlink
 *   - @link print_pdf.pages.inc PDF generation @endlink
 *   - @link print_pdf.class.inc Auxiliary PHP5 class @endlink
 *   - @link print_pdf.class_php4.inc Auxiliary PHP4 class @endlink
 *   - @link print_pdf.install (Un)Install routines @endlink
 */

/**
 * @file
 * Displays Printer-friendly versions of Drupal pages.
 *
 * This is the core module of the PF package, with the Drupal hooks
 * and other administrative functions.
 *
 * @ingroup print
 */

define('PRINT_PATH', 'print');

define('PRINT_LOGO_OPTIONS_DEFAULT', 1);
define('PRINT_LOGO_URL_DEFAULT', '');
define('PRINT_FOOTER_OPTIONS_DEFAULT', 1);
define('PRINT_FOOTER_USER_DEFAULT', '');
define('PRINT_CSS_DEFAULT', '');
define('PRINT_KEEP_THEME_CSS_DEFAULT', 0);
define('PRINT_URLS_DEFAULT', 1);
define('PRINT_URLS_ANCHORS_DEFAULT', 0);
define('PRINT_COMMENTS_DEFAULT', 0);
define('PRINT_NEWWINDOW_DEFAULT', 1);

define('PRINT_HTML_SENDTOPRINTER_DEFAULT', 0);
define('PRINT_HTML_WINDOWCLOSE_DEFAULT', 1);

define('PRINT_SOURCEURL_ENABLED_DEFAULT', 1);
define('PRINT_SOURCEURL_DATE_DEFAULT', 0);
define('PRINT_SOURCEURL_FORCENODE_DEFAULT', 0);

define('PRINT_ROBOTS_NOINDEX_DEFAULT', 1);
define('PRINT_ROBOTS_NOFOLLOW_DEFAULT', 1);
define('PRINT_ROBOTS_NOARCHIVE_DEFAULT', 0);

/**
 * Implements hook_print_link().
 */
function print_print_link() {
  return array(
    'format' => 'html',
    'text' => t('Printer-friendly version'),
    'description' => t('Display a printer-friendly version of this page.'),
    'permission' => 'access print',
    'path' => PRINT_PATH,
    'class' => 'print-page',
    'icon' => 'print_icon.gif',
    'module' => 'print',
  );
}

/**
 * Implements hook_permission().
 */
function print_permission() {
  return array(
    'administer print' => array(
      'title' => t('Administer the module'),
      'description' => t('Perform maintenance tasks for the print module.'),
    ),
    'access print' => array(
      'title' => t('Access the printer-friendly page'),
      'description' => t('View the printer-friendly pages and the links to them in the original pages.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function print_theme() {
  return array(
    'print' => array(
      'variables' => array('print' => array(), 'type' => '', 'node' => NULL),
      'template' => 'print',
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK().
 */
function print_preprocess_node(&$variables) {
  if ($variables['elements']['#view_mode'] == 'print') {
    $type = $variables['elements']['#node']->type;
    $format = $variables['elements']['#print_format'];
    $nid = $variables['elements']['#node']->nid;

    $variables['theme_hook_suggestions'][] = "node__print";
    $variables['theme_hook_suggestions'][] = "node__print__{$format}";
    $variables['theme_hook_suggestions'][] = "node__print__{$format}__node__{$type}";
    $variables['theme_hook_suggestions'][] = "node__print__{$format}__node__{$nid}";
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function print_preprocess_print(&$variables) {
  static $hooks = NULL;
  if (!isset($hooks)) {
    drupal_theme_initialize();
    $hooks = theme_get_registry();
  }

  $variables['page']['#show_messages'] = FALSE;

  // Stolen from theme() so that ALL preprocess functions are called
  $hook = 'page';
  $info = $hooks[$hook];
  if (isset($info['preprocess functions']) || isset($info['process functions'])) {
    $variables['theme_hook_suggestions'] = array();
    foreach (array('preprocess functions', 'process functions') as $phase) {
      if (!empty($info[$phase])) {
        foreach ($info[$phase] as $processor_function) {
          if (function_exists($processor_function)) {
            // We don't want a poorly behaved process function changing $hook.
            $hook_clone = $hook;
            $processor_function($variables, $hook_clone);
          }
        }
      }
    }
  }

  $format = $variables['type'];
  $type = (isset($variables['node']->type)) ? $variables['node']->type : '';
  $nid = (isset($variables['node']->nid)) ? $variables['node']->nid : '';

  $variables['theme_hook_suggestions'][] = "print__node__{$type}";
  $variables['theme_hook_suggestions'][] = "print__node__{$type}__{$nid}";
  $variables['theme_hook_suggestions'][] = "print__{$format}";
  $variables['theme_hook_suggestions'][] = "print__{$format}__node__{$type}";
  $variables['theme_hook_suggestions'][] = "print__{$format}__node__{$type}__{$nid}";
}

/**
 * Implements hook_menu().
 */
function print_menu() {
  $items = array();

  $items[PRINT_PATH] = array(
    'title' => 'Printer-friendly',
    'page callback' => 'print_controller_html',
    'access arguments' => array('access print'),
    'type' => MENU_CALLBACK,
    'file' => 'print.pages.inc',
  );
  $items[PRINT_PATH . '/' . PRINT_PATH] = array(
    'access callback' => FALSE,
  );
  $items['admin/config/user-interface/print'] = array(
    'title' => 'Printer, email and PDF versions',
    'description' => 'Adds a printer-friendly version link to content and administrative pages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('print_html_settings'),
    'access arguments'  => array('administer print'),
    'file' => 'print.admin.inc',
  );
  $items['admin/config/user-interface/print/html'] = array(
    'title' => 'Web page',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/user-interface/print/common'] = array(
    'title' => 'Settings',
    'description' => 'Settings for the common functionalities for all the print sub-modules.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('print_main_settings'),
    'access arguments'  => array('administer print'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
    'file' => 'print.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function print_block_info() {
  $block['print-top']['info'] = t('Most printed');
  $block['print-top']['cache'] = DRUPAL_CACHE_GLOBAL;
  return $block;
}

/**
 * Implements hook_block_view().
 */
function print_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'print-top':
      $block['subject'] = t('Most printed');
      $result = db_query_range("SELECT path FROM {print_page_counter} LEFT JOIN {node} ON path = CONCAT('node/', node.nid) WHERE status <> 0 OR status IS NULL ORDER BY totalcount DESC", 0, 3)
                  ->fetchAll();
      if (count($result)) {
        $block['content'] = '<div class="item-list"><ul>';
        foreach ($result as $obj) {
          $block['content'] .= '<li>' . l(_print_get_title($obj->path), $obj->path) . '</li>';
        }
        $block['content'] .= '</ul></div>';
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_node_delete().
 */
function print_node_delete($node) {
  db_delete('print_page_counter')
    ->condition('path', 'node/' . $node->nid)
    ->execute();
}

/**
 * Implements hook_entity_info_alter().
 */
function print_entity_info_alter(&$info) {
  // Add the 'Print' view mode for nodes.
  $info['node']['view modes'] += array(
    'print' => array(
      'label' => t('Print'),
      'custom settings' => FALSE,
    ),
  );
}

/**
 * Auxiliary function to discover a given page's title
 *
 * @param $path
 *   path of the page being identified
 * @return
 *   string with the page's title
 */
function _print_get_title($path) {
  $path = drupal_get_normal_path($path);
  $nid = preg_replace('!^node/!', '', $path);
  if (ctype_digit($nid)) {
    $res = db_query("SELECT title FROM {node} WHERE nid = :nid", array(':nid' => $nid))
              ->fetchField();
  }
  else {
    $res = db_query("SELECT link_title FROM {menu_links} WHERE link_path = :link_path", array(':link_path' => $path))
              ->fetchField();
  }
  return $res;
}

/**
 * Auxiliary function to display a formatted Printer-friendly link
 *
 * Function made available so that developers may call this function from
 * their defined pages/blocks.
 *
 * @param $path
 *   path of the original page (optional). If not specified, the current URL
 *   is used
 * @param $node
 *   an optional node object, to be used in defining the path, if used, the
 *   path argument is irrelevant
 * @return
 *   string with the HTML link to the printer-friendly page
 */
function print_insert_link($path = NULL, $node = NULL) {
  if (function_exists('print_ui_insert_link')) {
    return print_ui_insert_link('html', $path, $node);
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function print_contextual_links_view_alter(&$element, $items) {
  // Hide all contextual links
  if (preg_match('!^print!', $_GET['q'])) {
    unset($element['#links']);
  }
}
