<?php

/**
 * @file
 * Displays Printer-friendly versions of Drupal pages.
 *
 * @ingroup print
 */

define('PRINT_PDF_PDF_TOOL_DEFAULT', 0);
define('PRINT_PDF_CONTENT_DISPOSITION_DEFAULT', 2);
define('PRINT_PDF_PAPER_SIZE_DEFAULT', 'A4');
define('PRINT_PDF_PAGE_ORIENTATION_DEFAULT', 'portrait');
define('PRINT_PDF_IMAGES_VIA_FILE_DEFAULT', 0);
define('PRINT_PDF_AUTOCONFIG_DEFAULT', 1);
define('PRINT_PDF_FILENAME_DEFAULT', '[site:name] - [node:title] - [node:changed:custom:Y-m-d]');

/**
 * Implements hook_print_link().
 */
function print_pdf_print_link() {
  return array(
    'format' => 'pdf',
    'text' => t('PDF version'),
    'description' => t('Display a PDF version of this page.'),
    'path' => 'printpdf',
    'class' => 'print-pdf',
    'icon' => 'pdf_icon.gif',
    'module' => 'print_pdf',
  );
}

/**
 * Implements hook_print_new_window_alter().
 */
function print_pdf_print_new_window_alter(&$new_window, $format) {
  $new_window = (variable_get('print_pdf_content_disposition', PRINT_PDF_CONTENT_DISPOSITION_DEFAULT) == 1);
}

/**
 * Implements hook_permission().
 */
function print_pdf_permission() {
  return array(
    'access PDF version' => array(
      'title' => t('Access the PDF version'),
      'description' => t('View the PDF versions and the links to them in the original pages.'),
    ),
  );
}

/**
 * Implements hook_init().
 */
function print_pdf_init() {
  if (variable_get('print_pdf_autoconfig', PRINT_PDF_AUTOCONFIG_DEFAULT)) {
    $print_pdf_pdf_tool = variable_get('print_pdf_pdf_tool', PRINT_PDF_PDF_TOOL_DEFAULT);
    $tool = explode('|', $print_pdf_pdf_tool);
    $function = $tool[0] . '_pdf_tool_info';
    if (function_exists($function)) {
      $info = $function();
    }

    if (isset($info['public_dirs'])) {
      foreach ($info['public_dirs'] as $dir) {
        $directory = 'public://print_pdf/' . $tool[0] . '/' . $dir;
        file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function print_pdf_menu() {
  $link = print_pdf_print_link();
  $items = array();

  $items[$link['path']] = array(
    'title' => 'Printer-friendly PDF',
    'page callback' => 'print_pdf_controller',
    'access arguments' => array('access PDF version'),
    'type' => MENU_CALLBACK,
    'file' => 'print_pdf.pages.inc',
  );
  $items[$link['path'] . '/' . $link['path']] = array(
    'access callback' => FALSE,
  );
  $items['admin/config/user-interface/print/pdf'] = array(
    'title' => 'PDF',
    'description' => 'Configure the settings of the PDF generation functionality.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('print_pdf_settings'),
    'access arguments'  => array('administer print'),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
    'file' => 'print_pdf.admin.inc',
  );
  $items['admin/config/user-interface/print/pdf/options'] = array(
    'title' => 'Options',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function print_pdf_block_info() {
  $block['print_pdf-top']['info'] = t('Most PDFd');
  $block['print_pdf-top']['cache'] = DRUPAL_CACHE_GLOBAL;
  return $block;
}

/**
 * Implements hook_block_view().
 */
function print_pdf_block_view($delta = 0) {
  switch ($delta) {
    case 'print_pdf-top':
      $block['subject'] = t('Most PDFd');
      $result = db_query_range("SELECT path FROM {print_pdf_page_counter} LEFT JOIN {node} n ON path = CONCAT('node/', n.nid) WHERE status <> 0 OR status IS NULL ORDER BY totalcount DESC", 0, 3)
                  ->fetchAll();
      if (count($result)) {
        $items = array();
        foreach ($result as $obj) {
          $items[] = l(_print_get_title($obj->path), $obj->path);
        }
        $block['content'] = theme('item_list', array('items' => $items, 'type' => 'ul'));
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_requirements().
 */
function print_pdf_requirements($phase) {
  $requirements = array();
  $t = get_t();
  switch ($phase) {
    // At runtime, make sure that a PDF generation tool is selected
    case 'runtime':
      $print_pdf_pdf_tool = variable_get('print_pdf_pdf_tool', PRINT_PDF_PDF_TOOL_DEFAULT);
      if (empty($print_pdf_pdf_tool)) {
        $requirements['print_pdf_tool'] = array(
          'title' => $t('Printer, email and PDF versions - PDF generation library'),
          'value' => $t('No PDF tool selected'),
          'description' => $t('Please configure it in the !url.', array('!url' => l($t('PDF settings page'), 'admin/config/user-interface/print/pdf'))),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      else {
        // Tool is defined, get some data from it's handler module
        $tool = explode('|', $print_pdf_pdf_tool);
        $function = $tool[0] . '_pdf_tool_info';
        if (function_exists($function)) {
          $info = $function();
        }

        // Is the file there?
        if (!is_file($tool[1]) || !is_readable($tool[1])) {
          $requirements['print_pdf_tool'] = array(
            'title' => $t('Printer, email and PDF versions - PDF generation library'),
            'value' => $t('File not found'),
            'description' => $t('The currently selected PDF generation library (%file) is no longer accessible.', array('%file' => $tool[1])),
            'severity' => REQUIREMENT_ERROR,
          );
        }
        else {
          // Get the version number
          $function = $tool[0] . '_pdf_tool_version';
          if (function_exists($function)) {
            $version = $function($tool[1]);
          }

          if (isset($info['min_version']) && version_compare($version, $info['min_version'], '<')) {
            $requirements['print_pdf_tool_version'] = array(
              'title' => $t('Printer, email and PDF versions - PDF generation library'),
              'value' => $t('Unsupported %lib version', array('%lib' => $info['name'])),
              'description' => $t('The currently selected version of %lib (@version) is not supported. Please update to a !url.',
                                  array('%lib' => $info['name'], '@version' => $version, '!url' => l($t('newer version'), $info['url']))),
              'severity' => REQUIREMENT_ERROR,
            );
          }
          else {
            $requirements['print_pdf_tool_version'] = array(
              'title' => $t('Printer, email and PDF versions - PDF generation library'),
              'value' => $info['name'] . ' ' . $version,
            );
          }
        }

        // If auto-config is on, check for write access to the appropriate dirs
        if (variable_get('print_pdf_autoconfig', PRINT_PDF_AUTOCONFIG_DEFAULT)) {
          $directories = array();
          if (isset($info['public_dirs'])) {
            foreach ($info['public_dirs'] as $dir) {
              $directories[] = 'public://print_pdf/' . $tool[0] . '/' . $dir;
            }
          }
          if (isset($info['tool_dirs'])) {
            foreach ($info['tool_dirs'] as $dir) {
              $directories[] = dirname($tool[1]) . '/' . $dir;
            }
          }

          foreach ($directories as $dir) {
            if (!is_dir($dir) || !is_writable($dir)) {
              $requirements['print_pdf_tool_' . $dir] = array(
                'title' => $t('%lib directory', array('%lib' => $info['name'])),
                'value' => $t('Non-writable permissions'),
                'description' => $t('You must change the %libdir permissions to be writable, as %lib requires write-access to that directory.', array('%lib' => $info['name'], '%libdir' => $dir)),
                'severity' => REQUIREMENT_ERROR,
              );
            }
          }
        }
      }
      break;
  }
  return $requirements;
}

/**
 * Implements hook_node_delete().
 */
function print_pdf_node_delete($node) {
  db_delete('print_pdf_page_counter')
    ->condition('path', 'node/' . $node->nid)
    ->execute();
}

/**
 * Auxiliary function to display a formatted PDF version link
 *
 * Function made available so that developers may call this function from
 * their defined pages/blocks.
 *
 * @param string $path
 *   path of the original page (optional). If not specified, the current URL
 *   is used
 * @param object $node
 *   an optional node object, to be used in defining the path, if used, the
 *   path argument is irrelevant
 *
 * @return bool
 *   string with the HTML link to the printer-friendly page
 *
 * @ingroup print_api
 */
function print_pdf_insert_link($path = NULL, $node = NULL) {
  if (function_exists('print_ui_insert_link')) {
    return print_ui_insert_link(print_pdf_print_link(), array('path' => $path, 'node' => $node));
  }
  else {
    return FALSE;
  }
}

/**
 * Check if the link to the PDF version is allowed depending on the settings
 *
 * @param array $args
 *   array containing the possible parameters:
 *    view_mode, node, type, path
 *
 * @return bool
 *   FALSE if not allowed, TRUE otherwise
 */
function print_pdf_link_allowed($args) {
  $print_pdf_pdf_tool = variable_get('print_pdf_pdf_tool', PRINT_PDF_PDF_TOOL_DEFAULT);

  return (user_access('access PDF version') && (!empty($print_pdf_pdf_tool)));
}

/**
 * Generate a PDF version of the provided HTML.
 *
 * @param string $html
 *   HTML content of the PDF
 * @param array $meta
 *   Meta information to be used in the PDF
 *   - url: original URL
 *   - name: author's name
 *   - title: Page title
 *   - node: node object
 * @param string $filename
 *   (optional) Filename of the generated PDF
 *
 * @return
 *   generated PDF page, or NULL in case of error
 *
 * @see print_pdf_controller()
 *
 * @ingroup print_api
 */
function print_pdf_generate_html($html, $meta, $filename = NULL) {
  $pdf_tool = explode('|', variable_get('print_pdf_pdf_tool', PRINT_PDF_PDF_TOOL_DEFAULT));

  module_load_include('inc', $pdf_tool[0], $pdf_tool[0] . '.pages');

  $function = $pdf_tool[0] . '_print_pdf_generate';
  if (function_exists($function)) {
    return $function($html, $meta, $filename);
  }

  return NULL;
}

/**
 * Implements hook_views_api().
 */
function print_pdf_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'print_pdf'),
  );
}
